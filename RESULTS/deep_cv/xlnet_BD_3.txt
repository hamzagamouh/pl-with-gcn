Using backend: pytorch
HELLO !
CUDA is available !!
BEGIN TRAINING 
Embedding :  xlnet
CV Fold : fold_3_
Layers :  [1024, 512, 512, 512, 512, 512, 512, 2]
Dropout rate :  0.3
Using Batch Normalization
Training for 1000 Epochs 
Batch size :  32
In epoch 0, loss: 0.576, train mcc : 0.183 , val mcc : 0.213
In epoch 50, loss: 0.417, train mcc : 0.488 , val mcc : 0.270
In epoch 100, loss: 0.426, train mcc : 0.531 , val mcc : 0.279
In epoch 150, loss: 0.391, train mcc : 0.548 , val mcc : 0.283
In epoch 200, loss: 0.421, train mcc : 0.564 , val mcc : 0.289
In epoch 250, loss: 0.431, train mcc : 0.573 , val mcc : 0.302
In epoch 300, loss: 0.432, train mcc : 0.582 , val mcc : 0.297
In epoch 350, loss: 0.412, train mcc : 0.588 , val mcc : 0.299
In epoch 400, loss: 0.407, train mcc : 0.595 , val mcc : 0.296
In epoch 450, loss: 0.374, train mcc : 0.600 , val mcc : 0.299
In epoch 500, loss: 0.394, train mcc : 0.605 , val mcc : 0.290
In epoch 550, loss: 0.402, train mcc : 0.608 , val mcc : 0.301
In epoch 600, loss: 0.386, train mcc : 0.611 , val mcc : 0.292
In epoch 650, loss: 0.378, train mcc : 0.616 , val mcc : 0.306
In epoch 700, loss: 0.381, train mcc : 0.618 , val mcc : 0.313
In epoch 750, loss: 0.376, train mcc : 0.619 , val mcc : 0.307
In epoch 800, loss: 0.396, train mcc : 0.623 , val mcc : 0.298
In epoch 850, loss: 0.395, train mcc : 0.625 , val mcc : 0.308
In epoch 900, loss: 0.389, train mcc : 0.625 , val mcc : 0.304
In epoch 950, loss: 0.387, train mcc : 0.627 , val mcc : 0.297
In epoch 1000, loss: 0.377, train mcc : 0.628 , val mcc : 0.306
